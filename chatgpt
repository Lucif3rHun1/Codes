import cloudscraper
import requests
import json
from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
from urllib.parse import urlparse, parse_qs
from fake_useragent import UserAgent

class ProxyRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        try:
            # Parse query parameters for URL
            query_components = parse_qs(urlparse(self.path).query)
            if 'url' not in query_components:
                raise ValueError('No URL specified in query parameters')
            url = query_components['url'][0]

            # Forward headers to destination URL
            headers = {}
            for header, value in self.headers.items():
                if header != 'Host':
                    headers[header] = value

            # Create cloudscraper instance with random user agent and proxy
            ua = UserAgent()
            scraper = cloudscraper.create_scraper(browser={'User-Agent': ua.random})
            if 'x-lh-proxy' in self.headers:
                proxies = {'http': self.headers['x-lh-proxy']}
                scraper.proxies = proxies

            # Make request with cloudscraper
            response = scraper.get(url, headers=headers)

            # Set response headers
            response_headers = {}
            for header, value in response.headers.items():
                if header.lower() == 'set-cookie':
                    cookies = value.split(';')
                    cookie_values = []
                    for cookie in cookies:
                        cookie_parts = cookie.split('=')
                        if len(cookie_parts) == 2:
                            cookie_values.append(cookie_parts[1])
                    value = '; '.join(cookie_values)
                response_headers[header] = value

            # Return JSON response with headers, cookies, and source
            response_json = {
                'headers': response_headers,
                'cookies': response.cookies.get_dict(),
                'source': response.text
            }
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(response_json).encode())

        except Exception as e:
            self.send_error(500, f'Error occurred: {e}')

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    pass

if __name__ == '__main__':
    server_address = ('', 8000)
    httpd = ThreadedHTTPServer(server_address, ProxyRequestHandler)
    print(f'Starting server on port {server_address[1]}...')
    httpd.serve_forever()
